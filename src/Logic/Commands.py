from telegram import ReplyKeyboardRemove, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ConversationHandler
from os import getcwd
import logging

from database import DbInterface
from variables import *
from etc import text
from Logic.Payment import subscribe


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)
logger = logging.getLogger(__name__)


db = DbInterface("database.db")

def start(update, context):
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Users
    # add_user(chat_id, username, first_name, second_name)
    # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å

    # –¢–∞–∫ –∂–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
    # is_pay = db.check_payed_user(update.message.chat.id)
    isPayed = False #fix it!!!!!!
    if isPayed:
        update.message.reply_text("–ü–æ–∏–≥—Ä–∞–π —Å–æ —Å–≤–æ–∏–º –º–∞–ª—ã–º! –í–æ—Ç –∏–≥—Ä—ã...")
    else:
        text = "–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –í—ã –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å –¥–µ–º–æ –∏–≥—Ä—ã –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!"
        demo_button = InlineKeyboardButton("–î–µ–º–æ –∏–≥—Ä—ã üé≤", callback_data = "demo")
        subscribe_button = InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data = "subscribe")
        reply_markup = InlineKeyboardMarkup([[demo_button],[subscribe_button]])
        update.message.reply_text(text=text, reply_markup=reply_markup)

    logger.info("User %s: send /start command;", update.message.chat.id)

def demo(update, context):
    text = "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏–≥—Ä—ã –Ω–∞ –ø–æ–¥–æ–±–∏–∏ —ç—Ç–∏—Ö..."
    subscribe_button = InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data = "subscribe")
    reply_markup = InlineKeyboardMarkup([[subscribe_button]])
    context.bot.edit_message_text(
        chat_id = update.callback_query.message.chat.id, 
        message_id = update.callback_query.message.message_id, 
        text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ, –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", 
        reply_markup=reply_markup
        )
    logger.info("User %s: ask DEMO games;", update.callback_query.message.chat.id)

def done(update, context):
    update.message.reply_text('END')
    logger.info("User %s: finished ConversationHandler;", update.message.chat.id)
    return ConversationHandler.END

def terms(update, context):
    update.message.reply_text(text=text["terms"])
    logger.info("User %s: ask Terms;", update.message.chat.id)


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)